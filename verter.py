import os
import sys
import sqlite3
import logging
import asyncio
import pytz
import re
from datetime import datetime, timedelta, time as dt_time
from pathlib import Path

from telegram import Update, Chat, Message
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    filters,
)

from google import genai

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
CONFIG_PATH = 'config.txt'
DB_PATH = 'messages.db'
MESSAGES_DIR = 'messages'

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s %(levelname)s: %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler(sys.stdout)]
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("aiogram").setLevel(logging.WARNING)
logging.getLogger("requests").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ ---
def read_config(path):
    config = {}
    with open(path, encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith('#'):
                continue
            if '=' in line:
                key, val = line.split('=', 1)
                config[key.strip()] = val.strip()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    config['TARGET_CHAT_ID'] = int(config['TARGET_CHAT_ID'])
    # SUMMARY_TOPIC_ID —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω
    if 'SUMMARY_TOPIC_ID' in config and config['SUMMARY_TOPIC_ID'].strip():
        config['SUMMARY_TOPIC_ID'] = int(config['SUMMARY_TOPIC_ID'])
    else:
        config['SUMMARY_TOPIC_ID'] = None
    config['MAX_SUMMARY_SIZE'] = int(config['MAX_SUMMARY_SIZE'])
    config['IGNORED_TOPIC_IDS'] = [
        int(x) for x in config.get('IGNORED_TOPIC_IDS', '').split(',') if x.strip().isdigit()
    ]
    # –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è Gemini
    config['GEMINI_API_KEY'] = config.get('GEMINI_API_KEY', '')
    return config

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db(db_path):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            message_id INTEGER PRIMARY KEY,
            username TEXT,
            message_text TEXT,
            timestamp TEXT,
            chat_id INTEGER,
            thread_id INTEGER
        )
    ''')
    conn.commit()
    conn.close()

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
def save_message(db_path, message_id, username, message_text, timestamp, chat_id, thread_id):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute('''
        INSERT OR IGNORE INTO messages (message_id, username, message_text, timestamp, chat_id, thread_id)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (message_id, username, message_text, timestamp, chat_id, thread_id))
    conn.commit()
    conn.close()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ ---
def fetch_messages_for_period(db_path, chat_id, from_dt, to_dt, ignored_thread_ids):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    query = '''
        SELECT message_id, username, message_text, timestamp, thread_id
        FROM messages
        WHERE chat_id = ?
          AND timestamp >= ?
          AND timestamp < ?
    '''
    params = [chat_id, from_dt.isoformat(), to_dt.isoformat()]
    if ignored_thread_ids:
        query += ' AND (thread_id IS NULL OR thread_id NOT IN (%s))' % (
            ','.join(['?']*len(ignored_thread_ids))
        )
        params.extend(ignored_thread_ids)
    query += ' ORDER BY timestamp ASC'
    c.execute(query, params)
    rows = c.fetchall()
    conn.close()
    return rows

# --- –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è summary —á–µ—Ä–µ–∑ Gemini ---
def export_messages(config):
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    export_time = datetime.combine(now.date(), dt_time.fromisoformat(config['TIME_EXPORT']), tz)
    if now < export_time:
        export_time -= timedelta(days=1)
    from_dt = export_time
    to_dt = export_time + timedelta(days=1)
    date_str = to_dt.strftime('%d.%m.%y')  # dd.mm.yy
    export_dir = Path(MESSAGES_DIR) / date_str
    export_dir.mkdir(parents=True, exist_ok=True)

    messages = fetch_messages_for_period(
        DB_PATH,
        config['TARGET_CHAT_ID'],
        from_dt,
        to_dt,
        config['IGNORED_TOPIC_IDS']
    )
    logger.info(f"Exporting {len(messages)} messages for {date_str}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    lines = [f"{message_id} | {username}: {text}" for message_id, username, text, _, _ in messages]
    fname = export_dir / "messages.txt"
    with open(fname, 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))
    logger.info(f"Exported all messages to {fname}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –¥–µ–Ω—å (—Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏/–ø—Ä–æ–±–µ–ª—ã)
    if not any(line.strip() for line in lines):
        # –ì–æ—Ä–æ–¥ —Å–ø–∏—Ç...
        tz = pytz.timezone('Europe/Moscow')
        now = datetime.now(tz)
        start_date = datetime(2025, 4, 23, tzinfo=tz)
        day_number = (now.date() - start_date.date()).days
        summary_path = export_dir / 'summary.txt'
        msg = f"‚ú®{day_number}-–π –¥–µ–Ω—å –æ—Å–Ω–æ–≤—ã\nüåô –ì–æ—Ä–æ–¥ —Å–ø–∏—Ç..."
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(msg)
        logger.info("No messages for the day. Posted '–ì–æ—Ä–æ–¥ —Å–ø–∏—Ç...'")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary —á–µ—Ä–µ–∑ Gemini
    try:
        summary = generate_summary_via_gemini(config, fname)
        summary_path = export_dir / 'summary.txt'
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(summary.rstrip())
        logger.info(f"Summary saved to {summary_path}")
    except Exception as e:
        logger.error(f"Failed to generate summary via Gemini: {e}")

# --- Gemini summary helper ---
def generate_summary_via_gemini(config, messages_path):
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å promt.txt
    promt_path = Path(__file__).parent / 'promt.txt'
    with open(promt_path, encoding='utf-8') as f:
        prompt = f.read().strip()
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    with open(messages_path, encoding='utf-8') as f:
        messages = f.read().strip()
    # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø—Ä–æ–º—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    full_prompt = f"{prompt}\n{messages}"
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Gemini
    api_key = config['GEMINI_API_KEY']
    client = genai.Client(api_key=api_key)
    response = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=full_prompt
    )
    return response.text

def escape_markdown_v2(text):
    # –ù–∞–π—Ç–∏ –≤—Å–µ —Ç–µ–ª–µ–≥—Ä–∞–º-—Å—Å—ã–ª–∫–∏
    link_pattern = re.compile(r'\[üîó\]\(https://t\.me/c/\d+/[^)]+\)')
    # –ù–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–¢–µ–∫—Å—Ç**
    header_pattern = re.compile(r'\*\*([^\*]+)\*\*')

    result = []
    last_idx = 0

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, —É—á–∏—Ç—ã–≤–∞—è —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    for match in re.finditer(r'(\[üîó\]\(https://t\.me/c/\d+/[^)]+\))|(\*\*[^\*]+\*\*)', text):
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        before = text[last_idx:match.start()]
        special_chars = r'_*[]()~>#+\-=|{}.!'
        before = re.sub(f'([{re.escape(special_chars)}])', r'\\\1', before)
        result.append(before)

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if match.group(1):
            result.append(match.group(1))
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ *–¢–µ–∫—Å—Ç* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏—è
        elif match.group(2):
            header_text = match.group(2)[2:-2]  # –£–¥–∞–ª—è–µ–º ** —Å –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header_text = re.sub(f'([{re.escape(special_chars)}])', r'\\\1', header_text)
            result.append(f'*{header_text}*')

        last_idx = match.end()

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    special_chars = r'_*[]()~>#+\-=|{}.!'
    after = text[last_idx:]
    after = re.sub(f'([{re.escape(special_chars)}])', r'\\\1', after)
    result.append(after)

    return ''.join(result)

# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è summary ---
async def post_summary(config, application):
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    date_str = now.strftime('%d.%m.%y')  # dd.mm.yy
    export_dir = Path(MESSAGES_DIR) / date_str
    summary_path = export_dir / 'summary.txt'
    if not summary_path.exists():
        logger.warning(f"Looking for summary.txt at {summary_path}")
        logger.warning(f"No summary.txt found for {date_str}")
        return
    with open(summary_path, encoding='utf-8') as f:
        summary = f.read().strip()
    if len(summary) > config['MAX_SUMMARY_SIZE']:
        logger.warning(f"Summary exceeds MAX_SUMMARY_SIZE ({len(summary)} > {config['MAX_SUMMARY_SIZE']})")
        return
    start_date = datetime(2025, 4, 23, tzinfo=tz)
    day_number = (now.date() - start_date.date()).days
    # –ï—Å–ª–∏ –≤ summary —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è '–ì–æ—Ä–æ–¥ —Å–ø–∏—Ç...', –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if '–ì–æ—Ä–æ–¥ —Å–ø–∏—Ç...' in summary:
        msg = summary
    else:
        msg = f"‚ú®{day_number}-–π –¥–µ–Ω—å –æ—Å–Ω–æ–≤—ã #–¢–µ–º—ã_–¥–Ω—è\n{summary}"
    # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ logins.txt ---
    logins_path = Path('logins.txt')
    if logins_path.exists():
        try:
            with open(logins_path, encoding='utf-8') as f:
                logins_content = f.read().strip()
            if logins_content:
                msg += f"\n\n{logins_content}"
        except Exception as e:
            logger.error(f"Failed to read logins.txt: {e}")
    else:
        logger.warning(f"logins.txt not found at {logins_path.resolve()}")
    # --- –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2 ---
    msg = escape_markdown_v2(msg)
    send_args = dict(
        chat_id=config['TARGET_CHAT_ID'],
        text=msg,
        parse_mode="MarkdownV2"
    )
    if config.get('SUMMARY_TOPIC_ID') is not None:
        send_args['message_thread_id'] = config['SUMMARY_TOPIC_ID']
    try:
        await application.bot.send_message(**send_args)
        logger.info("Summary posted successfully.")
    except Exception as e:
        logger.error(f"Failed to post summary: {e}")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ---
async def scheduler(config, application):
    tz = pytz.timezone('Europe/Moscow')
    last_export_date = None
    last_post_date = None
    while True:
        now = datetime.now(tz)
        # –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        export_time = dt_time.fromisoformat(config['TIME_EXPORT'])
        naive_export_dt = datetime.combine(now.date(), export_time)  # naive datetime
        next_export = tz.localize(naive_export_dt)
        if now >= next_export:
            next_export += timedelta(days=1)
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è summary
        post_time = dt_time.fromisoformat(config['TIME_POST'])
        naive_post_dt = datetime.combine(now.date(), post_time)  # naive datetime
        next_post = tz.localize(naive_post_dt)
        if now >= next_post:
            next_post += timedelta(days=1)
        # Sleep –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        sleep_seconds = min((next_export - now).total_seconds(), (next_post - now).total_seconds())
        await asyncio.sleep(max(1, int(sleep_seconds)))
        now = datetime.now(tz)
        if abs((now - next_export).total_seconds()) < 60 and last_export_date != now.date():
            export_messages(config)
            last_export_date = now.date()
        if abs((now - next_post).total_seconds()) < 60 and last_post_date != now.date():
            await post_summary(config, application)
            last_post_date = now.date()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = context.bot_data['config']
    msg: Message = update.effective_message
    chat: Chat = update.effective_chat

    # –¢–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞
    if chat.id != config['TARGET_CHAT_ID']:
        return
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
    if getattr(msg, 'forward_from_chat', None) is not None and getattr(msg.forward_from_chat, 'type', None) == 'channel':        return
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã
    if chat.type not in ['group', 'supergroup']:
        return
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    if msg.text and msg.text.startswith('/'):
        return
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Ç–æ–ø–∏–∫–æ–≤
    thread_id = getattr(msg, 'message_thread_id', None)
    if thread_id is not None and thread_id in config['IGNORED_TOPIC_IDS']:
        return

    username = msg.from_user.username or msg.from_user.first_name or "Unknown"
    message_text = msg.text or msg.caption or ''
    if not message_text.strip():
        return
    if len(message_text) > 850:
        return
    timestamp = datetime.fromtimestamp(msg.date.timestamp(), pytz.UTC).astimezone(pytz.timezone('Europe/Moscow')).isoformat()
    save_message(
        DB_PATH,
        msg.message_id,
        username,
        message_text,
        timestamp,
        chat.id,
        thread_id
    )
    logger.info(f"Saved message from {username} (id={msg.message_id})")

# --- Main ---
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
    Path(MESSAGES_DIR).mkdir(exist_ok=True)
    config = read_config(CONFIG_PATH)
    init_db(DB_PATH)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application = ApplicationBuilder().token(config['TOKEN']).build()
    application.bot_data['config'] = config

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL, on_message))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler(config, application))

    logger.info("Bot started.")
    application.run_polling()

if __name__ == '__main__':
    main()
